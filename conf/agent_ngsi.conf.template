# Copyright 2016 Telefónica Investigación y Desarrollo, S.A.U
#
# This file is part of fiware-cygnus (FI-WARE project).
#
# fiware-cygnus is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
# Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# fiware-cygnus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along with fiware-cygnus. If not, see
# http://www.gnu.org/licenses/.
#
# For those usages not covered by the GNU Affero General Public License please contact with iot_support at tid dot es

#=============================================
# To be put in APACHE_FLUME_HOME/conf/agent.conf
#
# General configuration template explaining how to setup a sink of each of the available types (HDFS, CKAN, MySQL, PostgreSQL).

#=============================================
# The next tree fields set the sources, sinks and channels used by Cygnus. You could use different names than the
# ones suggested below, but in that case make sure you keep coherence in properties names along the configuration file.
# Regarding sinks, you can use multiple types at the same time; the only requirement is to provide a channel for each
# one of them (this example shows how to configure 3 sink types at the same time). Even, you can define more than one
# sink of the same type and sharing the channel in order to improve the performance (this is like having
# multi-threading).
cygnusagent.sources = http-source
cygnusagent.sinks = hdfs-sink mysql-sink postgresql-sink ckan-sink mongo-sink sth-sink kafka-sink dynamo-sink
cygnusagent.channels = hdfs-channel mysql-channel postgresql-channel ckan-channel mongo-channel sth-channel kafka-channel dynamo-channel

#=============================================
# source configuration
# channel name where to write the notification events
cygnusagent.sources.http-source.channels = hdfs-channel mysql-channel postgresql-channel ckan-channel mongo-channel sth-channel kafka-channel
# source class, must not be changed
cygnusagent.sources.http-source.type = org.apache.flume.source.http.HTTPSource
# listening port the Flume source will use for receiving incoming notifications
cygnusagent.sources.http-source.port = 5050
# Flume handler that will parse the notifications, must not be changed
cygnusagent.sources.http-source.handler = com.telefonica.iot.cygnus.handlers.NGSIRestHandler
# URL target
# cygnusagent.sources.http-source.handler.notification_target = /notify
# Default service (service semantic depends on the persistence sink)
# cygnusagent.sources.http-source.handler.default_service = default
# Default service path (service path semantic depends on the persistence sink)
# cygnusagent.sources.http-source.handler.default_service_path = /
# Source interceptors, do not change
cygnusagent.sources.http-source.interceptors = ts gi
# TimestampInterceptor, do not change
cygnusagent.sources.http-source.interceptors.ts.type = timestamp
# GroupinInterceptor, do not change
cygnusagent.sources.http-source.interceptors.gi.type = com.telefonica.iot.cygnus.interceptors.NGSIGroupingInterceptor$Builder
# Grouping rules for the GroupingInterceptor, put the right absolute path to the file if necessary
# See the doc/design/interceptors document for more details
cygnusagent.sources.http-source.interceptors.gi.grouping_rules_conf_file = /usr/cygnus/conf/grouping_rules.conf
# Authorization (if jwt_secret set the NGSIRestHandler will discard notifications with no and invalid X-Authorization header token)
#cygnusagent.sources.http-source.handler.jwt_secret = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
#cygnusagent.sources.http-source.handler.jwt_issuer = Viur (not implement support yet)
#cygnusagent.sources.http-source.handler.jwt_audience = Cygnus (not implement support yet)
#cygnusagent.sources.http-source.handler.jwt_subject = Cygnus Authorization (not implement support yet)

# ============================================
# NGSIHDFSSink configuration
# channel name from where to read notification events
cygnusagent.sinks.hdfs-sink.channel = hdfs-channel
# sink class, must not be changed
cygnusagent.sinks.hdfs-sink.type = com.telefonica.iot.cygnus.sinks.NGSIHDFSSink
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.hdfs-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.hdfs-sink.enable_lowercase = false
# default data model, must be dm-by-entity
# cygnusagent.sinks.hdfs-sink.data_model = dm-by-entity
# rest if the interaction with HDFS will be WebHDFS/HttpFS-based, binary if based on the Hadoop API
# cygnusagent.sinks.hdfs-sink.backend_impl = rest
# Comma-separated list of FQDN/IP address regarding the HDFS Namenode endpoints
# If you are using Kerberos authentication, then the usage of FQDNs instead of IP addresses is mandatory
# cygnusagent.sinks.hdfs-sink.hdfs_host = localhost
# port of the HDFS service listening for persistence operations; 14000 for httpfs, 50070 for webhdfs
# cygnusagent.sinks.hdfs-sink.hdfs_port = 14000
# username allowed to write in HDFS
cygnusagent.sinks.hdfs-sink.hdfs_username = hdfs_username
# password for the above username; this is only required for Hive authentication
cygnusagent.sinks.hdfs-sink.hdfs_password = xxxxxxxx
# OAuth2 token for HDFS authentication
cygnusagent.sinks.hdfs-sink.oauth2_token = xxxxxxxx
# true if the notified fiware-service (or the default one, if no one is notified) is used as the HDFS namespace, false otherwise
# cygnusagent.sinks.hdfs-sink.service_as_namespace = false
# how the attributes are stored, available formats are json-row, json-column, csv-row and csv-column
# cygnusagent.sinks.hdfs-sink.file_format = json-row
# field separator when using csv-row or csv-column, ',' by default
# cygnusagent.sinks.hdfs-sink.csv_separator = ,
# number of notifications to be included within a processing batch
# cygnusagent.sinks.hdfs-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.hdfs-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.hdfs-sink.batch_ttl = 10
# Hive enabling
# cygnusagent.sinks.hdfs-sink.hive = true
# Hive server version, 1 or 2 (ignored if hive is false)
# cygnusagent.sinks.hdfs-sink.hive.server_version = 2
# Hive FQDN/IP address of the Hive server (ignored if hive is false)
# cygnusagent.sinks.hdfs-sink.hive.host = localhost
# Hive port for Hive external table provisioning (ignored if hive is false)
# cygnusagent.sinks.hdfs-sink.hive.port = 10000
# Hive database type, available types are default-db and namespace-db
# cygnusagent.sinks.hdfs-sink.hive.db_type = default-db
# Kerberos-based authentication enabling
# cygnusagent.sinks.hdfs-sink.krb5_auth = false
# Kerberos username (ignored if krb5_auth is false)
cygnusagent.sinks.hdfs-sink.krb5_auth.krb5_user = krb5_username
# Kerberos password (ignored if krb5_auth is false)
cygnusagent.sinks.hdfs-sink.krb5_auth.krb5_password = xxxxxxxxxxxxx
# Kerberos login file (ignored if krb5_auth is false)
# cygnusagent.sinks.hdfs-sink.krb5_auth.krb5_login_conf_file = /usr/cygnus/conf/krb5_login.conf
# Kerberos configuration file (ignored if krb5_auth is false)
# cygnusagent.sinks.hdfs-sink.krb5_auth.krb5_conf_file = /usr/cygnus/conf/krb5.conf

# ============================================
# NGSICKANSink configuration
# channel name from where to read notification events
cygnusagent.sinks.ckan-sink.channel = ckan-channel
# sink class, must not be changed
cygnusagent.sinks.ckan-sink.type = com.telefonica.iot.cygnus.sinks.NGSICKANSink
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.ckan-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.ckan-sink.enable_lowercase = false
# Always dm-by-entity, even if not configured.
# cygnusagent.sinks.ckan-sink.data_model = dm-by-entity
# the CKAN API key to use
cygnusagent.sinks.ckan-sink.api_key = ckanapikey
# the FQDN/IP address for the CKAN API endpoint
# cygnusagent.sinks.ckan-sink.ckan_host = localhost
# the port for the CKAN API endpoint
# cygnusagent.sinks.ckan-sink.ckan_port = 80
# Orion URL used to compose the resource URL with the convenience operation URL to query it
# cygnusagent.sinks.ckan-sink.orion_url = http://localhost:1026
# how the attributes are stored, either per row either per column (row, column)
# cygnusagent.sinks.ckan-sink.attr_persistence = row
# enable SSL for secure Http transportation; 'true' or 'false'
# cygnusagent.sinks.ckan-sink.ssl = false
# number of notifications to be included within a processing batch
# cygnusagent.sinks.ckan-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.ckan-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.ckan-sink.batch_ttl = 10

# ============================================
# NGSIMySQLSink configuration
# channel name from where to read notification events
cygnusagent.sinks.mysql-sink.channel = mysql-channel
# sink class, must not be changed
cygnusagent.sinks.mysql-sink.type = com.telefonica.iot.cygnus.sinks.NGSIMySQLSink
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.mysql-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.mysql-sink.enable_lowercase = false
# Must be dm-by-service-path or dm-by-entity
# cygnusagent.sinks.mysql-sink.data_model = dm-by-entity
# the FQDN/IP address where the MySQL server runs
# cygnusagent.sinks.mysql-sink.mysql_host = localhost
# the port where the MySQL server listes for incomming connections
# cygnusagent.sinks.mysql-sink.mysql_port = 3306
# a valid user in the MySQL server (root by default)
# cygnusagent.sinks.mysql-sink.mysql_username = root
# password for the user above (empty password by default)
# cygnusagent.sinks.mysql-sink.mysql_password =
# how the attributes are stored, either per row either per column (row, column)
# cygnusagent.sinks.mysql-sink.attr_persistence = row
# select the data model from dm-by-entity and dm-by-service-path
# cygnusagent.sinks.mysql-sink.table_type = dm-by-entity
# number of notifications to be included within a processing batch
# cygnusagent.sinks.mysql-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.mysql-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.mysql-sink.batch_ttl = 10

# ============================================
# NGSIPostgreSQLSink configuration
# channel name from where to read notification events
cygnusagent.sinks.postgresql-sink.channel = postgresql-channel
# sink class, must not be changed
cygnusagent.sinks.postgresql-sink.type = com.telefonica.iot.cygnus.sinks.NGSIPostgreSQLSink
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.postgresql-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.postgresql-sink.enable_lowercase = false
# the FQDN/IP address where the PostgreSQL server runs
# cygnusagent.sinks.postgresql-sink.postgresql_host = localhost
# the port where the PostgreSQL server listens for incomming connections
# cygnusagent.sinks.postgresql-sink.postgresql_port = 5432
# the name of the postgresql database (postgres is the default database)
# cygnusagent.sinks.postgresql-sink.postgresql_database = postgres
# a valid user in the PostgreSQL server (postgres as default)
# cygnusagent.sinks.postgresql-sink.postgresql_username = postgres
# password for the user above (empty password as default)
# cygnusagent.sinks.postgresql-sink.postgresql_password =
# how the attributes are stored, either per row either per column (row, column)
# cygnusagent.sinks.postgresql-sink.attr_persistence = row
# Must be dm-by-service-path or dm-by-entity
# cygnusagent.sinks.postgresql-sink.data_model = dm-by-entity
# number of notifications to be included within a processing batch
# cygnusagent.sinks.postgresql-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.postgresql-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.postgresql-sink.batch_ttl = 10

# ============================================
# NGSIMongoSink configuration
# sink class, must not be changed
cygnusagent.sinks.mongo-sink.type = com.telefonica.iot.cygnus.sinks.NGSIMongoSink
# channel name from where to read notification events
cygnusagent.sinks.mongo-sink.channel = mongo-channel
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.mongo-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.mongo-sink.enable_lowercase = false
# FQDN/IP:port where the MongoDB server runs (standalone case) or comma-separated list of FQDN/IP:port pairs where the MongoDB replica set members run
# cygnusagent.sinks.mongo-sink.mongo_hosts = localhost:27017
# a valid user in the MongoDB server (or empty if authentication is not enabled in MongoDB)
# cygnusagent.sinks.mongo-sink.mongo_username =
# password for the user above (or empty if authentication is not enabled in MongoDB)
# cygnusagent.sinks.mongo-sink.mongo_password =
# prefix for the MongoDB databases
# cygnusagent.sinks.mongo-sink.db_prefix = sth_
# prefix pro the MongoDB collections
# cygnusagent.sinks.mongo-sink.collection_prefix = sth_
# true is collection names are based on a hash, false for human redable collections
# cygnusagent.sinks.mongo-sink.should_hash = false
# Must be dm-by-service-path or dm-by-entity
# cygnusagent.sinks.mongo-sink.data_model = dm-by-entity
# how the attributes are stored, either per row either per column (row, column)
# cygnusagent.sinks.mongo-sink.attr_persistence = row
# number of notifications to be included within a processing batch
# cygnusagent.sinks.mongo-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.mongo-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.mongo-sink.batch_ttl = 10
# Collections will be removed if older than the value specified in seconds. Set to 0 if not wanting this policy.
# cygnusagent.sinks.mongo-sink.data_expiration = 0
# The oldest data (according to insertion time) will be removed if the size of the data collection gets bigger than the value specified in bytes. Minimum value (different than 0) is 4096 bytes.
# cygnusagent.sinks.mongo-sink.collection_size = 0
# The oldest data (according to insertion time) will be removed if the number of documents in the data collections goes beyond the specified value. Set to 0 if not wanting this policy
# cygnusagent.sinks.mongo-sink.max_documents = 0
# true if white space-based attribute values must be ignored
# cygnusagent.sinks.mongo-sink.ignore_white_spaces = true

# ============================================
# NGSISTHSink configuration
# sink class, must not be changed
cygnusagent.sinks.sth-sink.type = com.telefonica.iot.cygnus.sinks.NGSISTHSink
# channel name from where to read notification events
cygnusagent.sinks.sth-sink.channel = sth-channel
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.sth-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.sth-sink.enable_lowercase = false
# Must be dm-by-service-path or dm-by-entity
# cygnusagent.sinks.sth-sink.data_model = dm-by-entity
# FQDN/IP:port where the MongoDB server runs (standalone case) or comma-separated list of FQDN/IP:port pairs where the MongoDB replica set members run
# cygnusagent.sinks.sth-sink.mongo_hosts = localhost:27017
# a valid user in the MongoDB server (or empty if authentication is not enabled in MongoDB)
# cygnusagent.sinks.sth-sink.mongo_username =
# password for the user above (or empty if authentication is not enabled in MongoDB)
# cygnusagent.sinks.sth-sink.mongo_password =
# prefix for the MongoDB databases
# cygnusagent.sinks.sth-sink.db_prefix = sth_
# prefix for the MongoDB collections
# cygnusagent.sinks.sth-sink.collection_prefix = sth_
# true is collection names are based on a hash, false for human redable collections
# cygnusagent.sinks.sth-sink.should_hash = false
# number of notifications to be included within a processing batch
# cygnusagent.sinks.sth-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.sth-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.sth-sink.batch_ttl = 10
# Collections will be removed if older than the value specified in seconds. Set to 0 if not wanting this policy.
# cygnusagent.sinks.sth-sink.data_expiration = 0
# true if white space-based attribute values must be ignored
# cygnusagent.sinks.sth-sink.ignore_white_spaces = true

#=============================================
# NGSIKafkaSink configuration
# sink class, must not be changed
cygnusagent.sinks.kafka-sink.type = com.telefonica.iot.cygnus.sinks.NGSIKafkaSink
# channel name from where to read notification events
cygnusagent.sinks.kafka-sink.channel = kafka-channel
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.kafka-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.kafka-sink.enable_lowercase = false
# select the Kafka data model between dm-by-service, dm-by-service-path, dm-by-attribute and dm-by-entity
# cygnusagent.sinks.kafka-sink.data_model = dm-by-entity
# comma-separated list of Kafka brokers (a broker is defined as host:port)
# cygnusagent.sinks.kafka-sink.broker_list = localhost:9092
# Zookeeper endpoint needed to create Kafka topics, in the form of host:port
# cygnusagent.sinks.kafka-sink.zookeeper_endpoint = localhost:2181
# number of partitions for a topic
# cygnusagent.sinks.kafka-sink.partitions
# replication factor of partitions into the brokers
# cygnusagent.sinks.kafka-sink.replication_factor
# number of notifications to be included within a processing batch
# cygnusagent.sinks.kafka-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.kafka-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.kafka-sink.batch_ttl = 10

# ============================================
# NGSIDynamoDBSink configuration
# sink class, must not be changed
cygnusagent.sinks.dynamodb-sink.type = com.telefonica.iot.cygnus.sinks.NGSIDynamoDBSink
# channel name from where to read notification events
cygnusagent.sinks.dynamodb-sink.channel = dynamo-channel
# AWS Access Key Id
cygnusagent.sinks.dynamodb-sink.access_key_id = xxxxxxxx
# AWS Secret Access Key
cygnusagent.sinks.dynamodb-sink.secret_access_key = xxxxxxxxx
# AWS region where the tables will be created (link)
# cygnusagent.sinks.dynamodb-sink.region = eu-central-1
# true if the grouping feature is enabled for this sink, false otherwise
# cygnusagent.sinks.dynamodb-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
# cygnusagent.sinks.dynamodb-sink.enable_lowercase = false
# how the attributes are stored, either per row either per column (row, column)
# cygnusagent.sinks.dynamodb-sink.attr_persistence = row
# select the data model from dm-by-entity and dm-by-service-path
# cygnusagent.sinks.dynamodb-sink.table_type = dm-by-entity
# number of notifications to be included within a processing batch
# cygnusagent.sinks.dynamodb-sink.batch_size = 1
# timeout for batch accumulation
# cygnusagent.sinks.dynamodb-sink.batch_timeout = 30
# number of retries upon persistence error
# cygnusagent.sinks.dynamodb-sink.batch_ttl = 10

# ============================================
# NGSIViurSink configuration
# (At the moment Viur uses PostgreSQL as the data persistence backend)
# sink class, must not be changed
cygnusagent.sinks.viur-sink.channel = viur-channel
# sink class, must not be changed
cygnusagent.sinks.viur-sink.type = com.telefonica.iot.cygnus.sinks.NGSIViurSink
# true if the grouping feature is enabled for this sink, false otherwise
cygnusagent.sinks.viur-sink.enable_grouping = false
# true if lower case is wanted to forced in all the element names, false otherwise
cygnusagent.sinks.viur-sink.enable_lowercase = false
# the FQDN/IP address where the PostgreSQL server runs
cygnusagent.sinks.viur-sink.host = localhost
# the port where the PostgreSQL server listens for incomming connections
cygnusagent.sinks.viur-sink.port = 5432
# the name of the postgresql database
cygnusagent.sinks.viur-sink.database = postgres
# a valid user in the PostgreSQL server
cygnusagent.sinks.viur-sink.username = postgres
# password for the user above
cygnusagent.sinks.viur-sink.password =
# how the attributes are stored, either per row either per column (column only)
cygnusagent.sinks.viur-sink.attr_persistence = column
# select the table type (don't change this for now)
cygnusagent.sinks.viur-sink.data_model = DM-BY-ENTITY
# number of notifications to be included within a processing batch
cygnusagent.sinks.viur-sink.batch_size = 3
# timeout for batch accumulation
cygnusagent.sinks.viur-sink.batch_timeout = 30
# number of retries upon persistence error
cygnusagent.sinks.viur-sink.batch_ttl = 10

#=============================================
# viur-channel configuration
# channel type (must not be changed)
cygnusagent.channels.viur-channel.type = memory
# capacity of the channel
cygnusagent.channels.viur-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.viur-channel.transactionCapacity = 100

#=============================================
# dynamo-channel configuration
# channel type (must not be changed)
cygnusagent.channels.dynamo-channel.type = memory
# capacity of the channel
cygnusagent.channels.dynamo-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.dynamo-channel.transactionCapacity = 100

#=============================================
# hdfs-channel configuration
# channel type (must not be changed)
cygnusagent.channels.hdfs-channel.type = memory
# capacity of the channel
cygnusagent.channels.hdfs-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.hdfs-channel.transactionCapacity = 100

#=============================================
# ckan-channel configuration
# channel type (must not be changed)
cygnusagent.channels.ckan-channel.type = memory
# capacity of the channel
cygnusagent.channels.ckan-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.ckan-channel.transactionCapacity = 100

#=============================================
# mysql-channel configuration
# channel type (must not be changed)
cygnusagent.channels.mysql-channel.type = memory
# capacity of the channel
cygnusagent.channels.mysql-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.mysql-channel.transactionCapacity = 100

#=============================================
# postgresql-channel configuration
# channel type (must not be changed)
cygnusagent.channels.postgresql-channel.type = memory
# capacity of the channel
cygnusagent.channels.postgresql-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.postgresql-channel.transactionCapacity = 100

#=============================================
# mongo-channel configuration
# channel type (must not be changed)
cygnusagent.channels.mongo-channel.type = memory
# capacity of the channel
cygnusagent.channels.mongo-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.mongo-channel.transactionCapacity = 100

#=============================================
# sth-channel configuration
# channel type (must not be changed)
cygnusagent.channels.sth-channel.type = memory
# capacity of the channel
cygnusagent.channels.sth-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.sth-channel.transactionCapacity = 100

#=============================================
# kafka-channel configuration
# channel type (must not be changed)
cygnusagent.channels.kafka-channel.type = memory
# capacity of the channel
cygnusagent.channels.kafka-channel.capacity = 1000
# amount of bytes that can be sent per transaction
cygnusagent.channels.mkafka-channel.transactionCapacity = 100
